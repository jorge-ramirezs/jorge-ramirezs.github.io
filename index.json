[{"content":"Introducción Neovim es VIM pero mejorado. La documentación oficial lo define como:\n Neovim es un editor de texto basado en Vim diseñado para la extensibilidad y usabilidad, para fomentar nuevas aplicaciones y contribuciones.\n Instalación Prerequisitos Como lo dice el título de este artículo, me estaré concentrando en configurar Neovim como IDE para python, entonces voy a asumir que ya tienes Python y Pip instalados en tu sistema.\nPython, Pip y Pipenv Para verificar que tengas Python instalado corre uno de los siguientes comandos en la consola:\n1 2  $ python --version $ python3 --version   El comando anterior deberá decirte la versión de Python instalada en tu sistema\nPara verificar si Pip está instalado, solo ejecuta pip en la consola. El comando deberá regresar la \u0026ldquo;ayuda\u0026rdquo;.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  $ pip Usage: pip \u0026lt;command\u0026gt; [options] Commands: install Install packages. download Download packages. uninstall Uninstall packages. freeze Output installed packages in requirements format. list List installed packages. show Show information about installed packages. check Verify installed packages have compatible dependencies. config Manage local and global configuration. search Search PyPI for packages. cache Inspect and manage pip\u0026#39;s wheel cache. wheel Build wheels from your requirements. hash Compute hashes of package archives. completion A helper command used for command completion. debug Show information useful for debugging. help Show help for commands.   Si no tienes instalado pip, lo puedes instalar ejectando:\n1  $ sudo apt-get install python3-pip   Para verificar si Pipenv está instalado, puedes ejecutar:\n1 2 3  $ pipenv --version pipenv, version 2020.11.15   Para instalar Pipenv, utiliza el siguiente comando:\n1  $ pip3 install pipenv   Git También vas a necesitar git para poder instalar el manejador de plugins \u0026ldquo;https://github.com/junegunn/vim-plug\u0026quot;\nSi no lo tienes instalado, lo puedes instalar utilizando:\n1  $ sudo apt-get install git   Neovim Por supuesto, debemos tener instalado Neovim con soporte para python, si no lo tienes aún, lo puedes instalar de la siguiente manera:\n1  $ sudo apt-get install neovim python3-neovim   Node.js Para poder instalar los plugins que nos van a permitir utilizar Neovim como IDE y reemplazar de una vez por todas VsCode, es necesario también instalar Node.js.\n1  $ sudo apt-get install npm   Nerdfont (Tipo de Letra) Para poder visualizar los iconos en la terminal es necesario tener un tipo de letra que lo soporte, en lo personal a mi me gustan las Nerdfonts.\nPuedes descargar DejaVuSansMono Nerd Font.\nUna vez que hayas descargado el archivo, descomprimelo y copia los archivos (*.ttf) al siguiente directorio:\n$HOME/.local/share/fonts/ Si por alguna razón no tienes el directorio, lo puedes crear.\nYa que hayas copiado los archivos, para poder utilizar este nuevo tipo de letra, debes ejecutar:\n1  $ fc-cache -fv   Asegurate de configurar este nuevo tipo de letra en la terminal que estés utilizando:\nConfiguración Directorio nvim Aunque puedes tener toda la configuración en tu archivo init.vim yo prefiero tener archivos separados para una mejor organización y fácil manejo.\nCrea la siguiente estructura de direcorios:\n📂 $HOME/.config/nvim/ ├──📁 general ├──📁 keymapping ├──📁 nvim-plugins └──📁 plug-config 1 2 3 4 5  mkdir $HOME/.config/nvim mkdir $HOME/.config/nvim/general mkdir $HOME/.config/nvim/keymapping mkdir $HOME/.config/nvim/nvim-plugins mkdir $HOME/.config/nvim/plug-config   Ambiente de Python para Neovim Vamos a crear un ambiente virtual dentro de la carpeta de configuración de Neovim. Para eso, en la terminal tecleamos lo siguiente:\n1 2 3  cd ~/.config/nvim pipenv install   Copia la ruta donde se creó el ambiente virtual pues lo usaremos en el siguiente paso:\nArchivos .vim general/settings.vim 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  syntax enableset guicursor= \u0026#34; Disable blinking for the n-v-c modesset termguicolorsset guioptions-=T \u0026#34; No Tool barset cursorline \u0026#34; Highlight the current lineset hidden \u0026#34; When on a buffer becomes hidden when it is abandonedset path+=**set nowrapset encoding=UTF-8set number relativenumberset smartindentset smarttabset tabstop=4 softtabstop=4set shiftwidth=4set expandtabset smartcaseset incsearchset nohlsearchset completeopt=menuone,noinsert,noselectset signcolumn=yesset colorcolumn=80highlight ColorColumn ctermbg=0 guibg=lightgreyset noswapfileset nobackupset undofileexecute \u0026#39;set undodir=\u0026#39; . g:nvim_data_root . \u0026#39;/undodir\u0026#39;\u0026#34; Python virtual environment detection in linuxlet g:loaded_python_provider = 0\u0026#34; Ruta donde se creó el ambiente de Python con pipenv.let g:python3_host_prog = \u0026#39;/home/{usuario}/.local/share/virtualenvs/{nvim-999999}/bin/python\u0026#39;  Plugins Instala vim-plug Para instalar vim-plug vamos a ejecutar el siguiente comando:\n1 2  sh -c \u0026#39;curl -fLo \u0026#34;${XDG_DATA_HOME:-$HOME/.local/share}\u0026#34;/nvim/site/autoload/plug.vim --create-dirs \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\u0026#39;   $HOME/.config/nvim/nvim-plugins/plugins.vim 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  call plug#begin(stdpath(\u0026#39;data\u0026#39;).\u0026#39;/plugged\u0026#39;)\u0026#34; NERDTree Plug \u0026#39;preservim/nerdtree\u0026#39;\u0026#34; VIM-DEVICONS icons for NERDTree Plug \u0026#39;ryanoasis/vim-devicons\u0026#39;\u0026#34; Conquer Of Completion Plug \u0026#39;neoclide/coc.nvim\u0026#39;, {\u0026#39;branch\u0026#39;: \u0026#39;release\u0026#39;}\u0026#34; Surround.vim Plug \u0026#39;tpope/vim-surround\u0026#39;\u0026#34; Airline status bar Plug \u0026#39;vim-airline/vim-airline\u0026#39; Plug \u0026#39;vim-airline/vim-airline-themes\u0026#39;\u0026#34; NERDCommenter Plug \u0026#39;preservim/nerdcommenter\u0026#39;call plug#end()  $HOME/.config/nvim/plug-config/coc.vim El siguiente es un ejemplo funcional tomado de la documentación oficial en github.\nlet g:coc_global_extensions = [ \\ \u0026#39;coc-snippets\u0026#39;, \\ \u0026#39;coc-pairs\u0026#39;, \\ \u0026#39;coc-python\u0026#39;, \\ \u0026#39;coc-prettier\u0026#39;, \\ \u0026#39;coc-vimlsp\u0026#39;, \\ \u0026#39;coc-marketplace\u0026#39;,\\ ]\u0026#34; TextEdit might fail if hidden is not set.set hidden\u0026#34; Some servers have issues with backup files, see #649.set nobackupset nowritebackup\u0026#34; Give more space for displaying messages.set cmdheight=2\u0026#34; Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable\u0026#34; delays and poor user experience.set updatetime=300\u0026#34; Don\u0026#39;t pass messages to |ins-completion-menu|.set shortmess+=c\u0026#34; Always show the signcolumn, otherwise it would shift the text each time\u0026#34; diagnostics appear/become resolved.if has(\u0026#34;patch-8.1.1564\u0026#34;)\u0026#34; Recently vim can merge signcolumn and number column into one set signcolumn=numberelse set signcolumn=yesendif\u0026#34; Use tab for trigger completion with characters ahead and navigate.\u0026#34; NOTE: Use command \u0026#39;:verbose imap \u0026lt;tab\u0026gt;\u0026#39; to make sure tab is not mapped by\u0026#34; other plugin before putting this into your config.inoremap \u0026lt;silent\u0026gt;\u0026lt;expr\u0026gt; \u0026lt;TAB\u0026gt; \\ pumvisible() ? \u0026#34;\\\u0026lt;C-n\u0026gt;\u0026#34; : \\ \u0026lt;SID\u0026gt;check_back_space() ? \u0026#34;\\\u0026lt;TAB\u0026gt;\u0026#34; : \\ coc#refresh()inoremap \u0026lt;expr\u0026gt;\u0026lt;S-TAB\u0026gt; pumvisible() ? \u0026#34;\\\u0026lt;C-p\u0026gt;\u0026#34; : \u0026#34;\\\u0026lt;C-h\u0026gt;\u0026#34;function! s:check_back_space() abort let col = col(\u0026#39;.\u0026#39;) - 1 return !col || getline(\u0026#39;.\u0026#39;)[col - 1] =~# \u0026#39;\\s\u0026#39;endfunction\u0026#34; Use \u0026lt;c-space\u0026gt; to trigger completion.if has(\u0026#39;nvim\u0026#39;) inoremap \u0026lt;silent\u0026gt;\u0026lt;expr\u0026gt; \u0026lt;c-space\u0026gt; coc#refresh()else inoremap \u0026lt;silent\u0026gt;\u0026lt;expr\u0026gt; \u0026lt;c-@\u0026gt; coc#refresh()endif\u0026#34; Make \u0026lt;CR\u0026gt; auto-select the first completion item and notify coc.nvim to\u0026#34; format on enter, \u0026lt;cr\u0026gt; could be remapped by other vim plugininoremap \u0026lt;silent\u0026gt;\u0026lt;expr\u0026gt; \u0026lt;cr\u0026gt; pumvisible() ? coc#_select_confirm() \\: \u0026#34;\\\u0026lt;C-g\u0026gt;u\\\u0026lt;CR\u0026gt;\\\u0026lt;c-r\u0026gt;=coc#on_enter()\\\u0026lt;CR\u0026gt;\u0026#34;\u0026#34; Use `[g` and `]g` to navigate diagnostics\u0026#34; Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.nmap \u0026lt;silent\u0026gt; [g \u0026lt;Plug\u0026gt;(coc-diagnostic-prev)nmap \u0026lt;silent\u0026gt; ]g \u0026lt;Plug\u0026gt;(coc-diagnostic-next)\u0026#34; GoTo code navigation.nmap \u0026lt;silent\u0026gt; gd \u0026lt;Plug\u0026gt;(coc-definition)nmap \u0026lt;silent\u0026gt; gy \u0026lt;Plug\u0026gt;(coc-type-definition)nmap \u0026lt;silent\u0026gt; gi \u0026lt;Plug\u0026gt;(coc-implementation)nmap \u0026lt;silent\u0026gt; gr \u0026lt;Plug\u0026gt;(coc-references)\u0026#34; Use K to show documentation in preview window.nnoremap \u0026lt;silent\u0026gt; K :call \u0026lt;SID\u0026gt;show_documentation()\u0026lt;CR\u0026gt;function! s:show_documentation() if (index([\u0026#39;vim\u0026#39;,\u0026#39;help\u0026#39;], \u0026amp;filetype) \u0026gt;= 0) execute \u0026#39;h \u0026#39;.expand(\u0026#39;\u0026lt;cword\u0026gt;\u0026#39;) elseif (coc#rpc#ready()) call CocActionAsync(\u0026#39;doHover\u0026#39;) else execute \u0026#39;!\u0026#39; . \u0026amp;keywordprg . \u0026#34; \u0026#34; . expand(\u0026#39;\u0026lt;cword\u0026gt;\u0026#39;) endifendfunction\u0026#34; Highlight the symbol and its references when holding the cursor.autocmd CursorHold * silent call CocActionAsync(\u0026#39;highlight\u0026#39;)\u0026#34; Symbol renaming.nmap \u0026lt;leader\u0026gt;rn \u0026lt;Plug\u0026gt;(coc-rename)\u0026#34; Formatting selected code.xmap \u0026lt;leader\u0026gt;f \u0026lt;Plug\u0026gt;(coc-format-selected)nmap \u0026lt;leader\u0026gt;f \u0026lt;Plug\u0026gt;(coc-format-selected)augroup mygroup autocmd!\u0026#34; Setup formatexpr specified filetype(s). autocmd FileType typescript,json setl formatexpr=CocAction(\u0026#39;formatSelected\u0026#39;)\u0026#34; Update signature help on jump placeholder. autocmd User CocJumpPlaceholder call CocActionAsync(\u0026#39;showSignatureHelp\u0026#39;)augroup end\u0026#34; Applying codeAction to the selected region.\u0026#34; Example: `\u0026lt;leader\u0026gt;aap` for current paragraphxmap \u0026lt;leader\u0026gt;a \u0026lt;Plug\u0026gt;(coc-codeaction-selected)nmap \u0026lt;leader\u0026gt;a \u0026lt;Plug\u0026gt;(coc-codeaction-selected)\u0026#34; Remap keys for applying codeAction to the current buffer.nmap \u0026lt;leader\u0026gt;ac \u0026lt;Plug\u0026gt;(coc-codeaction)\u0026#34; Apply AutoFix to problem on the current line.nmap \u0026lt;leader\u0026gt;qf \u0026lt;Plug\u0026gt;(coc-fix-current)\u0026#34; Map function and class text objects\u0026#34; NOTE: Requires \u0026#39;textDocument.documentSymbol\u0026#39; support from the language server.xmap if \u0026lt;Plug\u0026gt;(coc-funcobj-i)omap if \u0026lt;Plug\u0026gt;(coc-funcobj-i)xmap af \u0026lt;Plug\u0026gt;(coc-funcobj-a)omap af \u0026lt;Plug\u0026gt;(coc-funcobj-a)xmap ic \u0026lt;Plug\u0026gt;(coc-classobj-i)omap ic \u0026lt;Plug\u0026gt;(coc-classobj-i)xmap ac \u0026lt;Plug\u0026gt;(coc-classobj-a)omap ac \u0026lt;Plug\u0026gt;(coc-classobj-a)\u0026#34; Remap \u0026lt;C-f\u0026gt; and \u0026lt;C-b\u0026gt; for scroll float windows/popups.if has(\u0026#39;nvim-0.4.0\u0026#39;) || has(\u0026#39;patch-8.2.0750\u0026#39;) nnoremap \u0026lt;silent\u0026gt;\u0026lt;nowait\u0026gt;\u0026lt;expr\u0026gt; \u0026lt;C-f\u0026gt; coc#float#has_scroll() ? coc#float#scroll(1) : \u0026#34;\\\u0026lt;C-f\u0026gt;\u0026#34; nnoremap \u0026lt;silent\u0026gt;\u0026lt;nowait\u0026gt;\u0026lt;expr\u0026gt; \u0026lt;C-b\u0026gt; coc#float#has_scroll() ? coc#float#scroll(0) : \u0026#34;\\\u0026lt;C-b\u0026gt;\u0026#34; inoremap \u0026lt;silent\u0026gt;\u0026lt;nowait\u0026gt;\u0026lt;expr\u0026gt; \u0026lt;C-f\u0026gt; coc#float#has_scroll() ? \u0026#34;\\\u0026lt;c-r\u0026gt;=coc#float#scroll(1)\\\u0026lt;cr\u0026gt;\u0026#34; : \u0026#34;\\\u0026lt;Right\u0026gt;\u0026#34; inoremap \u0026lt;silent\u0026gt;\u0026lt;nowait\u0026gt;\u0026lt;expr\u0026gt; \u0026lt;C-b\u0026gt; coc#float#has_scroll() ? \u0026#34;\\\u0026lt;c-r\u0026gt;=coc#float#scroll(0)\\\u0026lt;cr\u0026gt;\u0026#34; : \u0026#34;\\\u0026lt;Left\u0026gt;\u0026#34; vnoremap \u0026lt;silent\u0026gt;\u0026lt;nowait\u0026gt;\u0026lt;expr\u0026gt; \u0026lt;C-f\u0026gt; coc#float#has_scroll() ? coc#float#scroll(1) : \u0026#34;\\\u0026lt;C-f\u0026gt;\u0026#34; vnoremap \u0026lt;silent\u0026gt;\u0026lt;nowait\u0026gt;\u0026lt;expr\u0026gt; \u0026lt;C-b\u0026gt; coc#float#has_scroll() ? coc#float#scroll(0) : \u0026#34;\\\u0026lt;C-b\u0026gt;\u0026#34;endif\u0026#34; Use CTRL-S for selections ranges.\u0026#34; Requires \u0026#39;textDocument/selectionRange\u0026#39; support of language server.nmap \u0026lt;silent\u0026gt; \u0026lt;C-s\u0026gt; \u0026lt;Plug\u0026gt;(coc-range-select)xmap \u0026lt;silent\u0026gt; \u0026lt;C-s\u0026gt; \u0026lt;Plug\u0026gt;(coc-range-select)\u0026#34; Add `:Format` command to format current buffer.command! -nargs=0 Format :call CocAction(\u0026#39;format\u0026#39;)\u0026#34; Add `:Fold` command to fold current buffer.command! -nargs=? Fold :call CocAction(\u0026#39;fold\u0026#39;, \u0026lt;f-args\u0026gt;)\u0026#34; Add `:OR` command for organize imports of the current buffer.command! -nargs=0 OR :call CocAction(\u0026#39;runCommand\u0026#39;, \u0026#39;editor.action.organizeImport\u0026#39;)\u0026#34; Add (Neo)Vim\u0026#39;s native statusline support.\u0026#34; NOTE: Please see `:h coc-status` for integrations with external plugins that\u0026#34; provide custom statusline: lightline.vim, vim-airline.set statusline^=%{coc#status()}%{get(b:,\u0026#39;coc_current_function\u0026#39;,\u0026#39;\u0026#39;)}\u0026#34; Mappings for CoCList\u0026#34; Show all diagnostics.nnoremap \u0026lt;silent\u0026gt;\u0026lt;nowait\u0026gt; \u0026lt;space\u0026gt;a :\u0026lt;C-u\u0026gt;CocList diagnostics\u0026lt;cr\u0026gt;\u0026#34; Manage extensions.nnoremap \u0026lt;silent\u0026gt;\u0026lt;nowait\u0026gt; \u0026lt;space\u0026gt;e :\u0026lt;C-u\u0026gt;CocList extensions\u0026lt;cr\u0026gt;\u0026#34; Show commands.nnoremap \u0026lt;silent\u0026gt;\u0026lt;nowait\u0026gt; \u0026lt;space\u0026gt;c :\u0026lt;C-u\u0026gt;CocList commands\u0026lt;cr\u0026gt;\u0026#34; Find symbol of current document.nnoremap \u0026lt;silent\u0026gt;\u0026lt;nowait\u0026gt; \u0026lt;space\u0026gt;o :\u0026lt;C-u\u0026gt;CocList outline\u0026lt;cr\u0026gt;\u0026#34; Search workspace symbols.nnoremap \u0026lt;silent\u0026gt;\u0026lt;nowait\u0026gt; \u0026lt;space\u0026gt;s :\u0026lt;C-u\u0026gt;CocList -I symbols\u0026lt;cr\u0026gt;\u0026#34; Do default action for next item.nnoremap \u0026lt;silent\u0026gt;\u0026lt;nowait\u0026gt; \u0026lt;space\u0026gt;j :\u0026lt;C-u\u0026gt;CocNext\u0026lt;CR\u0026gt;\u0026#34; Do default action for previous item.nnoremap \u0026lt;silent\u0026gt;\u0026lt;nowait\u0026gt; \u0026lt;space\u0026gt;k :\u0026lt;C-u\u0026gt;CocPrev\u0026lt;CR\u0026gt;\u0026#34; Resume latest coc list.nnoremap \u0026lt;silent\u0026gt;\u0026lt;nowait\u0026gt; \u0026lt;space\u0026gt;p :\u0026lt;C-u\u0026gt;CocListResume\u0026lt;CR\u0026gt;  $HOME/.config/nvim/plug-config/nerdcommenter.vim 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  \u0026#34; Add spaces after comment delimiters by defaultlet g:NERDSpaceDelims = 1\u0026#34; Use compact syntax for prettified multi-line commentslet g:NERDCompactSexyComs = 1\u0026#34; Align line-wise comment delimiters flush left instead of following code indentationlet g:NERDDefaultAlign = \u0026#39;left\u0026#39;\u0026#34; Set a language to use its alternate delimiters by defaultlet g:NERDAltDelims_java = 1\u0026#34; Add your own custom formats or override the defaultslet g:NERDCustomDelimiters = { \u0026#39;c\u0026#39;: { \u0026#39;left\u0026#39;: \u0026#39;/**\u0026#39;,\u0026#39;right\u0026#39;: \u0026#39;*/\u0026#39; } }\u0026#34; Allow commenting and inverting empty lines (useful when commenting a region)let g:NERDCommentEmptyLines = 1\u0026#34; Enable trimming of trailing whitespace when uncommentinglet g:NERDTrimTrailingWhitespace = 1\u0026#34; Enable NERDCommenterToggle to check all selected lines is commented or not let g:NERDToggleCheckAllLines = 1\u0026#34;  $HOME/.config/nvim/plug-config/airline.vim 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  \u0026#34; enable tablinelet g:airline#extensions#tabline#enabled = 1\u0026#34; let g:airline#extensions#tabline#left_sep = \u0026#39;\u0026#39;\u0026#34; let g:airline#extensions#tabline#left_alt_sep = \u0026#39;\u0026#39;\u0026#34; let g:airline#extensions#tabline#right_sep = \u0026#39;\u0026#39;\u0026#34; let g:airline#extensions#tabline#right_alt_sep = \u0026#39;\u0026#39;\u0026#34; enable powerline fontslet g:airline_powerline_fonts = 1\u0026#34; let g:airline_left_sep = \u0026#39;\u0026#39;\u0026#34; let g:airline_right_sep = \u0026#39;\u0026#39;\u0026#34; Always show tabsset showtabline=2\u0026#34; We don\u0026#39;t need to see things like -- INSERT -- anymoreset noshowmode  $HOME/.config/nvim/keymapping/keys.vim 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  \u0026#34; Edit vimrc fasternnoremap \u0026lt;Leader\u0026gt;v :e $MYVIMRC\u0026lt;cr\u0026gt;\u0026#34; Reload init.vimnnoremap \u0026lt;silent\u0026gt; \u0026lt;Leader\u0026gt;\u0026lt;Leader\u0026gt; :source $MYVIMRC\u0026lt;cr\u0026gt;\u0026#34;Change working directorynnoremap \u0026lt;leader\u0026gt;cd :cd %:p:h\u0026lt;cr\u0026gt;\u0026#34;Mapping NERDTreemap \u0026lt;C-n\u0026gt; :NERDTreeToggle\u0026lt;cr\u0026gt;\u0026#34; Use alt + hjkl to resize windowsnnoremap \u0026lt;M-j\u0026gt; :resize -2\u0026lt;CR\u0026gt;nnoremap \u0026lt;M-k\u0026gt; :resize +2\u0026lt;CR\u0026gt;nnoremap \u0026lt;M-h\u0026gt; :vertical resize -2\u0026lt;CR\u0026gt;nnoremap \u0026lt;M-l\u0026gt; :vertical resize +2\u0026lt;CR\u0026gt;\u0026#34; NerdCommenter Toggle remap to CTRL+/vmap \u0026lt;C-_\u0026gt; \u0026lt;Plug\u0026gt;NERDCommenterToggle\u0026lt;cr\u0026gt;nmap \u0026lt;C-_\u0026gt; \u0026lt;Plug\u0026gt;NERDCommenterToggle\u0026lt;cr\u0026gt;\u0026#34; Start Terminal using PowerShell 7 (Preview)\u0026#34; For default shell, remove \u0026#34;://pwsh.exe\u0026#34;\u0026#34; You can customize the shell by replacing \u0026#34;pwsh.exe\u0026#34; with your shell for example:\u0026#34; :edit term://bash\u0026#34; :vsplit term://top\u0026#34; For more :help terminalnmap \u0026lt;leader\u0026gt;t :vsplit term://bash\u0026lt;cr\u0026gt;\u0026#34; Move between buffersnnoremap \u0026lt;leader\u0026gt;\u0026lt;tab\u0026gt; :bn\u0026lt;cr\u0026gt;nnoremap \u0026lt;leader\u0026gt;\u0026lt;S-tab\u0026gt; :bp\u0026lt;cr\u0026gt;\u0026#34; Closing and hiding current buffernnoremap \u0026lt;leader\u0026gt;w :bd\u0026lt;cr\u0026gt;  $HOME/.config/nvim/init.vim 1 2 3 4 5 6 7 8 9 10 11 12 13  let g:nvim_data_root = stdpath(\u0026#39;data\u0026#39;)let g:nvim_config_root = stdpath(\u0026#39;config\u0026#39;)let g:config_file_list = [\u0026#39;/nvim-plugins/plugins.vim\u0026#39;, \\ \u0026#39;/general/settings.vim\u0026#39;, \\ \u0026#39;/keymapping/keys.vim\u0026#39;, \\ \u0026#39;/plug-config/airline.vim\u0026#39;, \\ \u0026#39;/plug-config/coc.vim\u0026#39;, \\ \u0026#39;/plug-config/nerdcommenter.vim\u0026#39;, \\ ]for f in g:config_file_list execute \u0026#39;source \u0026#39; . g:nvim_config_root . fendfor  Reiniciar Neovim e instalar los plugins Una vez que guardes los cambios, debes salir de Neovim y volver a entrar, luego ejecutar :PlugInstall\nEsto instalará los plugins y las extensiones de CConquer of Completion (coc).\nPaso Final: Configura coc-python Para que todo funcione correctamente debes instalar de manera global una libreria de python llamada \u0026ldquo;jedi\u0026rdquo;. Al instalarlo de manera global te evitarás tener que instalarlo en cada uno de tus ambientes virtuales.\nPara Instalar:\n1  $ pip install jedi   Una vez instalada, hay que configurar CoC. Primero copia la ruta donde se instaló jedi, para saber esa ruta ejecuta lo siguiente en la terminal:\n1 2 3 4 5 6 7 8 9 10 11 12  $ pip show jedi Name: jedi Version: 0.17.2 Summary: An autocompletion tool for Python that can be used for text editors. Home-page: https://github.com/davidhalter/jedi Author: David Halter Author-email: davidhalter88@gmail.com License: MIT Location: /usr/lib/python3.9/site-packages \u0026lt;== Esta es la ruta que debes copiar en el siguiente archivo de configuración Requires: parso Required-by:   Abre Neovim y ejecuta :CocConfig\nEsto abrirá un buffer vacío, este buffer es donde configuras CoC\nAgrega lo siguiente, reemplazando la ruta por la ruta donde está instalado \u0026ldquo;jedi\u0026rdquo; en tu sistema:\n1 2 3  { \u0026#34;python.jediPath\u0026#34;: \u0026#34;/usr/lib/python3.9/site-packages\u0026#34; }   Guarda el archivo, cierra Neovim y vuelve a abrir.\nListo, hasta aquí tienes una configuración lista para trabajar con Neovim y reemplazar VSCode.\nBonus Gruvbox 💻 En lo personal, el mejor tema para programar en Neovim, es Gruvbox, la combinación de colores se me hace seria y sobretodo muy cómodo para la vista, simple y sencillamente\u0026hellip; ¡Me Encanta!\nPrimero agregamos el plugin en $HOME/.config/nvim/nvim-plugins/plugins.vim\n1 2  \u0026#34; Other themes Plug \u0026#39;morhetz/gruvbox\u0026#39;  Recuerda que una vez que guardes los cambios, debes salir de Neovim y volver a entrar, luego correr :PlugInstall\nDespués hay que editar $HOME/.config/nvim/general/settings.vim para agregar gruvbox como tema por defecto.\n1 2 3 4  \u0026#34; Gruvbox por defectocolorscheme gruvboxlet g:gruvbox_contrast_dark=\u0026#39;hard\u0026#39;set background=dark  Por último, vamos a configurar Airline con el mismo tema de colores. Para eso hay que editar $HOME/.config/nvim/plug-config/airline.vim\n1 2  \u0026#34;Gruvboxlet g:airline_theme=\u0026#39;gruvbox\u0026#39;  Conclusión Neovim es un editor de textos ligero y sobretodo muy \u0026ldquo;configurable\u0026rdquo;, al principio puede parecer intimidante pero con el tiempo y la práctica se vuelve una herramienta muy útil para el desarrollo.\nSi deseas conocer que otras extensiones existen para CoC, visita la wiki oficial donde encontraras basta información.\nSi tienes algún comentario o recomendación de algún artículo que te gustaría que cubriera en este blog, no dudes en mandarme un mensaje en twitter a @JorgeRS\nSi te gustó este artículo por favor compartelo en cualquiera de las redes sociales utilizando los botones más abajo.\n","description":"El día de hoy vamos a instalar y a configurar Neovim para utilizarlo como IDE para programar en Python. Vamos a utilizar algunos \"Plugins\" para obtener las ventajas que cualquier otro IDE tiene, tales como validación de sintaxis y autocompletado.","id":0,"section":"blog","tags":["vim","neovim","python","ide"],"title":"Como Configurar Neovim Como VsCode","uri":"https://linuxfacil.mx/blog/neovim/como-configurar-neovim-como-vscode-para-python/"},{"content":"En YouTube Parte 1: La instalación   Parte 2: La Configuración   Introducción ¿Qué es BSPWM? Según la documentación oficial:\n bwspwm es un administrador de ventanas en mosaico que representa las ventanas como las hojas de un árbol binario completo.\nSolo responde a eventos X Window System  y los mensajes que recibe en un conector dedicado.\nbspc es un programa que escribe mensajes en el socket de bspwm.\nbspwm no maneja ninguna entrada de teclado o puntero: se necesita un programa de terceros (por ejemplo,sxhkd ) para traducir eventos de teclado y puntero a invocaciones bspc.\n Instalar Paquetes Afortunadamente Ubuntu ya tiene listos los paquetes que necesitamos instalar, así entonces solo necesitamos abrir una terminal y ejecutar el siguiente comando:\n1  $ sudo apt-get install bspwm polybar suckless-tools   Atención: sxhkd es una dependencia de bspwm, así que no es necesario mencionarlo en el comando anterior, solo verifica que este paquete también se instale.\nCrear Archivos de Configuración El siguiente paso es crear, o mejor dicho, copiar los archivos de configuración de ejemplo y modificarlos a nuestro gusto:\nPrimero vamos a crear los directorios que contendrán los archivos de configuración:\n1 2 3  $ mkdir ~/.config/bspwm $ mkdir ~/.config/sxhkd $ mkdir ~/.config/polybar   El siguiente paso es copiar los archivos de ejemplo a nuestros nuevos directorios de configuración:\n1 2 3  $ cp /usr/share/doc/bspwm/examples/bspwmrc ~/.config/bspwm/ $ cp /usr/share/doc/bspwm/examples/sxhkdrc ~/.config/sxhkd/ $ cp /usr/share/doc/polybar/config ~/.config/polybar/   Modificar los archivos de configuración: Una vez que tenemos los archivos de configuración en nuestro directorio, lo siguiente es modificarlos para poderlos utilizar.\nPrimero modificamos el arcvhivo \u0026ldquo;sxhkdrc\u0026rdquo; Por defecto, sxhkd utiliza la terminal \u0026ldquo;urxvt\u0026rdquo; que probablemente no tengas instalada, por lo tanto debemos indicarle que mejor utilize \u0026ldquo;gnome-terminal\u0026rdquo;.\nPara eso vamos a requerir un editor de textos como \u0026ldquo;nano\u0026rdquo;, \u0026ldquo;vim\u0026rdquo;, o incluso \u0026ldquo;gedit\u0026rdquo; puede funcionar, utliza el que más se acomode a tu gusto:\nPara motivos de este tutorial y para no meternos en muchos problemas voy a utilizar \u0026ldquo;gedit\u0026rdquo; en el siguiente comando:\n1  $ gedit ~/.config/sxhkd/sxhkdrc   Ahora sustituye \u0026ldquo;urxvt\u0026rdquo; por \u0026ldquo;gnome-terminal\u0026rdquo; (Sin las comillas), guarda los cambios con \u0026ldquo;CTRL+s\u0026rdquo; y cierra el archivo.\nSegundo, configuramos \u0026ldquo;Polybar\u0026rdquo; A continuación vamos a configurar Polybar, aqui lo que debemos hacer es crear un archivo que es el que se va a encargar de ejecutar Polybar.\n1  $ gedit ~/.config/polybar/launch.sh   Este comando abrirá una ventana en blanco porque se supone no tenemos este archivo, ahora copia lo siguiente y pegalo en gedit.\n1 2 3 4 5 6 7 8 9 10 11 12  #!/usr/bin/env bash # Terminate already running bar instances killall -q polybar # If all your bars have ipc enabled, you can also use # polybar-msg cmd quit # Launch bar1 and bar2 echo \u0026#34;---\u0026#34; | tee -a /tmp/polybar1.log /tmp/polybar2.log polybar example \u0026gt;\u0026gt;/tmp/polybar1.log 2\u0026gt;\u0026amp;1 \u0026amp; disown echo \u0026#34;Bars launched...\u0026#34;   Guarda el archivo y cierra \u0026ldquo;gedit\u0026rdquo;.\nAhora debemos asegurarnos de que el archivo que acabamos de crear sea ejectuable, para eso, corre el siguiente comando:\n1  $ chmod +x ~/.config/polybar/launch.sh   Por último, configuramos \u0026ldquo;bspwmrc\u0026rdquo; Ahora lo que nos resta, es decirla e bspwm que ejecute Polybar cuando se inicie, para eso, modificamos el siguiente archivo:\n1  $ gedit ~/.config/bspwm/bspwmrc   Agrega la siguiente línea:\n1  $HOME/.config/polybar/launch.sh   Guarda y Cierra el archivo.\nSalir de Sesión e Iniciar BSPWM. Con lo anterior ya dejamos la configuración básica, ahora lo que toca es iniciar la sesión pero utilizando BSPWM.\nPara eso primero cierra la sesión, luego en la pantalla de inicio, donde te pide tu nombre de usuario y contraseña, selecciona tu usuario y da clic en el engrane que se encuentra en la parte inferior derecha de la pantalla y selecciona \u0026ldquo;bspwm\u0026rdquo;\nConfigurar BSPWM Cuando inicies la sesión deberás ver únicamente la pantalla en negro y la barra de estatus en la parte superior (Polybar)\nPara abrir una terminal presiona \u0026ldquo;Super + Enter\u0026rdquo;, donde \u0026ldquo;Super\u0026rdquo; es la tecla de \u0026ldquo;Windows\u0026rdquo;.\nResolución de pantalla (Opcional) Para configurar la resolución de tu pantalla es necesario hacerlo con el comando \u0026ldquo;xrandr\u0026rdquo; como se muestra en el siguiente ejemplo:\n Verifica el nombre de la pantalla (Screen):  1  $ xrandr   En esta imágen se ve la salida de mi maquina virtual que tiene un solo monitor con el nombre \u0026ldquo;Virtual'1\u0026rdquo;, el asterisco identifica la resolución actual.\nSi tu tienes más de un monitor conectado, verifica el nombre del dispositivo al que deseas cambiarle la resolución.\nEjemplo:\nYa que identificaste el nombre, para cambiarle la resolución utiliza lo siguiente:\n1  $ xrandr -s 1920x1080 -r 60.00   En caso de cualquier duda puedes consultar el manual teclando \u0026ldquo;man xrandr\u0026rdquo; en la terminal.\nSi la configuración que seleccionaste funcionó, presiona \u0026ldquo;Super + alt + r\u0026rdquo; para que BSPWM se reinicie, esto hará que la Polybar ocupe el ancho de la pantalla correctamente.\nAhora lo que toca es editar el archivo ~/.config/bspwm/bspwmrc para que cada vez que inicies BSPWM configure la pantalla correctamente.\n1  $ gedit ~/.config/bspwm/bspwmrc   Y agrega el comando que utilizaste:\n1  xrandr --output Virtual-1 --mode 1920x1080   Presiona \u0026ldquo;Ctrl + s\u0026rdquo; para grabar y luego \u0026ldquo;Super + w\u0026rdquo; para cerrar la ventana.\nSi tienes dudas con las combinaciones de teclas, recuerda que toda la configuración está en ~/.config/sxhkd/sxhkdrc\nCombinación de teclas importantes Aquí te dejo algunas combinaciones de teclas que pueden ser de ayuda, recuerda que las puedes modificar y que puedes crear nuevas.\nPara cambiar de area de trabajo, presiona\nSuper + 1 Donde \u0026ldquo;1\u0026rdquo; es el número de área de trabajo, en Polybar puedes ver que por default tienes 10, si te quieres mover al 10, presiona \u0026ldquo;Super + 0\u0026rdquo;\n   Combinación Descripción     Super + enter Abre la terminal   Super + espacio Abre el menú (dmenu)   Super + ESC Carga la configuración de sxhkd de nuevo   Super + alt + q Para salir de BSPWM   Super + alt + r Para reiniciar BSPWM    ¿Dudas, preguntas o consejos? Puedes encontrarme en Twitter \n","description":"En este artículo te voy a explicar como instalar BSPWM y Polybar en Ubuntu 20.10.","id":1,"section":"blog","tags":["bspwm","polybar","ubuntu"],"title":"Como Instalar Bspwm Polybar en Ubuntu 20.10","uri":"https://linuxfacil.mx/blog/linux/como-instalar-bspwm-polybar-en-ubuntu/"},{"content":"Bajar el ISO El primer paso obviamente es bajar el ISO del sitio oficial\nInstala Arch Linux Una vez que hayas bajado el ISO y creado el USB, arranca tu maquina.\nA continuación los pasos de la instalación.\nVerifica que tengas Conexión a Internet. 1  ip a   El comando anterior debe regresarte los dispositivos de red, se recomienda que tengas conectada tu computadora por cable ethernet.\nSi no tienes cable conectado, entonces tendrás que utilizar iwctl:\n1  iwctl   https://wiki.archlinux.org/index.php/Iwd#iwctl\nConfigura el Teclado En mi caso estoy utilizando un teclado en Inglés así que no requiero en este paso, pero si tu estás utilizando un teclado en Español lo mejor es que lo configures para no batallar y hacer la instalación más sencilla.\n1  loadkeys es   Sincroniza el reloj A continuación vamos a sincronizar el reloj con internet, para eso escribimos\n1  timedatectl set-ntp true   Selecciona el servidor más cercano para instalar los paquetes (Mirror) Para esto vamos a necesitar un paquete que se llama Reflector, así que vamos a instalarlo primero escribiendo\n1  pacman -Syy reflector   Ahora selecciona el servidor más cercano a donde te encuentras, para ver una lista de países escribe\n1  reflector --list-countries | more   Ya que tengas identificado el país que te queda más cerca escribe lo siguiente:\n(En mi caso como estoy en Estados Unidos, escogeré United States por supuesto, pero tú puedes cambialo por el país de la lista anterior que te quede más cerca)\n1  reflector -c \u0026#34;United States\u0026#34; -a 6 --sort rate --save /etc/pacman.d/mirrorlist   Actualiza los servidores de paquetes Siguente teclea\n1  pacman -Syyy   Crea Particiones en el Disco Primero vamos a verificar cual es el dispositivo donde se encuentra el disco de nuestra máquina virtual\n1  lsblk   Mi disco está en /dev/sda\nTenemos que crear 2 particiones, una para los archivos de inicio o \u0026ldquo;boot\u0026rdquo; y otra donde estará instalado Arch Linux.\nPara crear las particiones voy a utilizar cfdisk\n1  cfdisk /dev/sda   Selecciona \u0026ldquo;dos\u0026rdquo; porque esta es una instalación en MBR\nVamos a crear 2 particiones, la primera partición será para SWAP y la segunda para la instalación del sistema.\n  Selecciona [ New ]\n  El tamaño de la primera partición será de 4GB en mi caso\n  Selecciona [ primary ] y presiona ENTER\n  Cambia el tipo de partición a SWAP seleccionando [ Type ] y luego \u0026ldquo;Linux swap\u0026rdquo;\n  Selecciona el espacio disponible (Free Space), luego selecciona [ New ] , presiona ENTER y luego ENTER de nuevo para seleccionar todo el espacio disponible, en mi caso los 9.8G restantes\n  Selecciona [ Type ] y luego selecciona \u0026ldquo;Linux filesystem\u0026rdquo; de la lista\n  Selecciona [ Write ] para guardar los cambios y crear las particiones. cfdisk te preguntara si estás seguro de que deseas crear las nuevas particiones. Teclea \u0026ldquo;yes\u0026rdquo; y presiona ENTER\n  Verifica las particiones Para verificar que todo haya ido bien teclea lsblk y asegurate de que las particiones estén como sigue\nFormatea las particiones   La primera partición es nuestra partición de SWAP, esta NO es necesario que se formatee.\n  Formatea la segunda partición, pero en esta ocasión el tipo será EXT4\n  1  mkfs.ext4 /dev/sda2   La partición de SWAP no es necesaria formatearla pero si debemos crearla y activarla como sigue:  1 2  mkswap /dev/sda1 swapon /dev/sda1   Monta las particiones Una vez creadas y formateadas nuestras particiones ahora debemos montarlas en nuestro sistema, para eso necesitmos hacer lo siguiente:\n Montar la segunda partición en /mnt que es nuestro directorio para la instalación  1  mount /dev/sda2 /mnt   Verifica que las particiones estén montadas correctamente utilizando lsblk  1  lsblk   Instala los paquetes \u0026ldquo;base\u0026rdquo; Una vez montadas las particiones comenzamos la instalación de los paquetes base, los paquetes que vamos a instalar son \u0026ldquo;base, linux, linux-firmware y vim (puedes instalar nano si lo deseas)\n1  pacstrap /mnt base linux linux-firmware vim   Crear fstab Listo, la instalación base ya está lista, ahora lo que necesitamos hacer es crear nuestro archivo fstab\n1  genfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab   Entra a la instalación Listo, ya que veas en tu archivo de fstab que todo está correcto, que tienes ambas particiones configuradas correctamente, vamos a crear nuestro archivo de swap.\n Primero entra a la instalación base  1  arch-chroot /mnt   Configura tu zona horaria Ahora podemos continuar con la configuración de nuestra instalación, así que toca el turno de la zona horaria.\n Primero vamos a ver un listado de las zonas horarias disponibles. La zona horaria donde me encuentro es la zona de Chicago, sustituye Chicago por la ciudad que te corresponda, por ejemplo Mexico  1  timedatectl list-timezones | grep Chicago   Una vez identificada la zona horaria, creamos un enlace simbolico en etc/localtime  1  ln -sf /usr/share/zoneinfo/America/Chicago /etc/localtime   Ahora ya podemos sincronizar el reloj del sistema con el reloj de hardware  1  hwclock --systohc   Configura tu \u0026ldquo;Localización\u0026rdquo; (locale) Esto es para decirle a Arch Linux donde te encuentras y cual es el grupo de caracteres que corresponden a tu idioma por ejemplo.\nEn mi caso voy a utlizar Inglés de Estados Unidos, el código es \u0026ldquo;en_US.UTF-8\u0026rdquo; pero por ejemplo, si te encuentras en México y estás utilizando teclado en Español y deberás utilizar el código de \u0026ldquo;es_MX.UTF-8\u0026rdquo;.\nNota: Puedes habilitar más de un código de localización.\n Para habilitar el código de localización deseado, edita el siguente archivo y descomenta la línea donde se encuentre el código que andas buscando. (De nuevo, yo utilizo vim, tu puedes hacerlo con nano o con el que hayas instalado al inicio)  1  vim /etc/locale.gen   Genera la localización en el sistema  1  locale-gen   Ahora necesitamos crear el archivo de configuración en nuestra instalación para eso:  1  echo LANG=en_US.UTF-8 \u0026gt;\u0026gt; /etc/locale.conf   Nota: Sustituye \u0026ldquo;en_US.UTF-8\u0026rdquo; por el código que hayas habilitado en el paso anterior\n(Opcional) Si al comienzo de la instalación seleccionaste el tipo de teclado, deberás agregarlo a tu instalación con el siguente comando:\n(Suponiendo que seleccionaste \u0026ldquo;es\u0026rdquo;)  1  echo KEYMAP=es \u0026gt;\u0026gt; /etc/vconsole.conf   Configura los archivos de Red  Crea el archivo \u0026ldquo;hostname\u0026rdquo; para darle un nombre a tu máquina virutal. En mi caso voy a ser creativo y le daré el nombre de \u0026ldquo;archlinux\u0026rdquo;  1  vim /etc/hostname   Agrega lo siguiente a tu archivo /etc/hosts  1  vim /etc/hosts   1 2 3  127.0.0.1\tlocalhost ::1\tlocalhost 127.0.1.1\tarchlinx.localdomain\tarchlinux   Crea un password para root El siguiente paso de la instalación es darle un password a nuestro usuario de root.\nComo ya estamos en nuestra instalación, para cambiar el password solo debemos teclear:\n1  passwd   En el prompt escribe el nuevo password (Uno que no se te olvide) y en el siguente prompt vuelve a escribir el mismo password para confirmarlo.\nInstala los paquetes finales Es momento de instalar nuestro \u0026ldquo;boot loader\u0026rdquo; y paquetes finales antes de reiniciar la máquina. GRUB será nuestro boot loader.\n Instala los siguientes paquetes. Puedes agregar paquetes que creas necesarios.  1  pacman -S grub networkmanager network-manager-applet dialog wireless_tools wpa_supplicant os-prober mtools dosfstools base-devel linux-headers cups reflector openssh git virtualbox-guest-utils   Acepta todos los prompts por defecto. Y presiona ENTER para continuar con la instalación\nSi te aparece la siguiente pantalla, presiona ENTER para aceptar las llaves PGP.\nInstala GRUB Es momento de instalar grub en el disco, como es una instalación en MBR, el comando es como sigue:\n1  grub-install --target=i386-pc /dev/sda   Ahora necesitamos crear el archivo de configuración  1  grub-mkconfig -o /boot/grub/grub.cfg   Habilita los servicios Llegó el momento de habilitar los servicios que correrán cada que reinicies la máquina.\n Habilita el manejador de la red Continua con el servicio de SSH Luego el servicio para imprimir  1 2 3  systemctl enable NetworkManager systemctl enable sshd systemctl enable org.cups.cupsd   Crea tu usuario Todo lo hemos hecho con el usuario de root, pero siempre es conveniente tener tu propio usuario para no utilizar root para las tareas diarias. Voy a crear mi usuario que se llamará \u0026ldquo;jorge\u0026rdquo;.\n Crea el usuario y asignalo al grupo \u0026ldquo;wheel\u0026rdquo; Crea un password para tu usuario  1 2  useradd -mG wheel jorge passwd jorge   Ahora para darle privilegios de \u0026ldquo;sudo\u0026rdquo; y puedas ejecutar comandos como superusuario \u0026ldquo;root\u0026rdquo;, debemos descomentar la linea que dice \u0026quot;%wheel ALL=(ALL) ALL\u0026rdquo; con el siguiente comando  Recuerda que puedes sustituir \u0026ldquo;vim\u0026rdquo; por \u0026ldquo;nano\u0026rdquo; si lo prefieres.\n1  EDITOR=vim visudo   Sal de la instalación y reinicia la máquina virtual Con esto terminamos la instalación, así que solo queda:\n Salir de la instalación Desmontar las particiones Reiniciar la máquina virtual  1 2 3  exit umount -a reboot   Instalación Exitosa Después de reiniciar la máquina virtual verás que GRUB está instalado y debe estar funcionando correctamente.\nEntra a tu nueva instalación de Arch Linux con el usuario y password que creaste para verificar que todo esté funcionando correctamente.\nSi encontraste este tutorial útil no olvides que puedes compartirlo con tus compañeros, familiares y amigos utilizando los botones al final del artículo.\nNo dejes de visitarme porque estaré subiendo más tutoriales, ahora lo que sigue es instalar un escritorio en esta máquina virtual. ¿Cuál te gustaría instalar? ¿Gnome? ¿KDE? ¿O talvez un manejador de ventanas como i3 o awesome?\n","description":"Si tienes una computadora vieja donde quieras instalar ArchLinux y esta tiene BIOS, entoces, esta guía es para tí. También en este artículo te voy a decir como instalar XFCE4, un escritorio bastante ligero que no deberá darte problemas en equipos viejos.","id":2,"section":"blog","tags":["archlinux","linux","mbr","bios"],"title":"Como Instalar Archlinux en BIOS - MBR","uri":"https://linuxfacil.mx/blog/linux/como-instalar-archlinux-en-mbr/"},{"content":"Tutorial en YouTube   Bajar el ISO Lo primero es descargar el ISO del sitio web oficial de Artix Linux\nArtix tiene varias versiones, en esta ociasión vamos a realizar una instalación base, también instalaremos OpenRC en lugar de systemd y por último pondermos Mate como escritorio:\nComienza la Instalación Ya que arrancamos nuestra máquina, ya sea virtual o física comencemos la instalación entonces.\nVerificiar que tengas conexión a Internet. 1  ip a   Este comando debe regresar los nombres de los dispositivos de red y una dirección de IP.\nCrear particiones Antes de crear las particiones y comezar la instalación, debemos cambiarnos al usuario de \u0026ldquo;root\u0026rdquo;\n1  sudo su -   Para verificar el nombre del dispositivo, es decir el disco donde instalaremos Artix, teclea:\n1  lsblk   En mi caso el disco que donde voy a instalar Artix es \u0026ldquo;vda\u0026rdquo;\n1  cfdisk /dev/vda   Como es una instalación sobre UEFI, selecciona \u0026ldquo;gpt\u0026rdquo;\nCrea una partición para \u0026ldquo;boot\u0026rdquo; y otra para \u0026ldquo;/\u0026rdquo;\nLa partición de \u0026ldquo;boot\u0026rdquo; será de 100 MB y el resto del disco para \u0026ldquo;raíz\u0026rdquo;.\nRecuerda que la partición de \u0026ldquo;boot\u0026rdquo; debe ser tipo EFI system\nFormatear particiones Formateamos la primera partición de tipo \u0026ldquo;FAT32\u0026rdquo;\n1  mkfs.fat -F 32 /dev/vda1   Luego formateamos la segunda partición de tipo \u0026ldquo;ext4\u0026rdquo;\n1  mkfs.ext4 /dev/vda2   Montar las particiones Primero montamos la partición 2 \u0026ldquo;vda2\u0026rdquo; en /mnt\n1  mount /dev/vda2 /mnt   Luego creamos el directorio de boot y montamos la primera partición\n1 2  mkdir /mnt/boot mount /dev/vda1 /mnt/boot   Instalar el sistema base 1  basestrap /mnt base base-devel linux linux-firmware openrc vim amd-ucode (intel-ucode si es tu caso)   Generar tabla de sistema de archivos (fstab) 1  fstabgen -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab   Configurar el sistema base Para esto hay que entrar a nuestra instalación tecleando:\n1  artools-chroot /mnt   Crear archivo de Swap 1 2 3 4  dd if=/dev/zero of=swapfile bs=1G count=2 status=progress chmod 600 /swapfile mkswap /swapfile swapon /swapfile   Editar /etc/fstab Agrega lo siguiente al final del archivo\n1  /swapfile none swap defaults 0 0   Configurar el reloj del sistema 1  ln -sf /usr/share/zoneinfo/America/Chicago /etc/localtime   Sincroniza el reloj del hardware con el del sistema 1  hwclock --systohc   Localización 1  vim /etc/locale.gen   Genera el \u0026ldquo;locale\u0026rdquo;\n1  locale-gen   Necesitamos ahora poner este \u0026ldquo;locale\u0026rdquo; en el archivo de configuración\n1  vim /etc/locale.conf   agrega lo siguiente\n1  LANG=\u0026#34;en_US.UTF-8\u0026#34;   GRUB Para instalar GRUB\n1 2 3  pacman -S grub os-prober efibootmgr grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub (para sistemas con UEFI) grub-mkconfig -o /boot/grub/grub.cfg   Crea un password para usuario root 1  passwd   Crea tu usuario 1 2  useradd -mG wheel jorge passwd jorge   Habilita el grupo \u0026ldquo;wheel\u0026rdquo; 1  EDITOR=vim visudo   Descomenta la linea que dice:\n1  %wheel ALL=(ALL) ALL   Configura la red Edita el archivo\n1  vim /etc/hostname   Agrega solo el nombre de tu computadora, sin dominio ni nada más\nDespués edita el archivo\n1  vim /etc/hosts   Para que quede como sigue:\n1 2 3 4 5 6  # Static table lookup for hostnames. # See hosts(5) for details. 127.0.0.1\tlocalhost ::1\tlocalhost 127.0.0.1\tartix.localdomain\tartix   Instala connman 1 2  pacman -S connman-openrc connman-gtk (or cmst for Qt-based DEs) rc-update add connmand   Resetea la computadora 1 2 3  exit umount -R /mnt reboot   Configuración post-instalación e Instalación de Escritorio (MATE) Instala xorg 1 2  sudo pacman -Syyy sudo pacman -S xorg --ignore xorg-server-xdmx   Instala el controlador de tu tarjeta de video Si tienes tarjeta intel instala:\n1  sudo pacman -S xf86-video-intel   Si tienes tarjeta AMD instala:\n1  sudo pacman -S xf86-video-amdgpu   Si tienes tarjeta NVIDIA instala:\n1  sudo pacman -S nvidia-lts   Instala el escritorio 1  sudo pacman -S mate mate-extra system-config-printer blueman connman-gtk   Instala el Administrador de Inicio de Sesión (Display Manager) 1  sudo pacman -S displaymanager-openrc sddm   Habilita el Administrador de Inicio de Sesión en OPENRC 1 2  sudo rc-update add xdm default sudo vim /etc/conf.d/xdm   Edita para que quede así:\n1  DISPLAYMANAGER=\u0026#34;sddm\u0026#34;   Reinicia el sistema. 1  sudo reboot   ","description":"En esta ocasión vamos a instalar Artix Linux con OpenRC y MATE como escritorio. Básicamente Artix es Arch pero sin Systemd.","id":3,"section":"blog","tags":["artix","tutorial"],"title":"Como Instalar Artix Linux Openrc","uri":"https://linuxfacil.mx/blog/linux/como-instalar-artix-linux-openrc/"},{"content":"BSPWM bspwm es un manejador de ventanas en mosaico, la característica principal es que presenta las ventanas como hojas de un archivo binario.\nbspwm soporta el uso de múltiple monitores y es configurado y controlado a través de mensajes.\nSi has estado siguiendo mi tutorial de como instalar archlinux en una máquina virtual, esta es la continuación.\nInstalación. Vamos a instalar los paquetes necesarios para correr bspwm. En esta ocasión no voy a instalar un \u0026ldquo;Display Manager\u0026rdquo;, así que para iniciar el modo gráfico vamos a utilizar \u0026ldquo;startx\u0026rdquo;.\n1  sudo pacman -S xorg-server xorg-xinit xf86-video-qxl bspwm sxhkd dmenu nitrogen picom terminator chromium arandr   Configuración Inicial Antes de iniciar el modo gráfico tenemos que configurar bspwm y sxhkd\nVamos a crear los directorios de configuración y copiar los archivos.\n1 2 3 4 5 6  mkdir ~/.config/bspwm mkdir ~/.config/sxhkd cp /usr/share/doc/bspwm/examples/bspwmrc ~/.config/bspwm cp /usr/share/doc/bspwm/examples/sxhkdrc ~/.config/sxhkd   Ahora vamos a cambiar la terminal por defecto en sxhkdrc por \u0026ldquo;terminator\u0026rdquo; que fue la teminal que instalamos.\nEdita ~/.config/sxhkd/sxhkdrc\nY remplaza urxvt por terminator para que quede como sigue:\n1 2 3  # terminal emulator super + Return terminator   Luego tenemos que configurar Xinit.\nPrimero copiamos el archivo de ejempo xinitrc en nuestro directorio\n1  cp /etc/X11/xinit/xinitrc ~/.xinitrc   Luego removemos las ultimas 5 lineas y agregamos las siguientes dos por lo pronto:\n1 2  picom -f \u0026amp; exec bspwm   Como estamos en una máquina virtual tenemos que deshabilitar la siguiente opción en /etc/xdg/picom.conf\nCambia la opción \u0026ldquo;vsync = true\u0026rdquo; a\n1  vsync = false   O si lo deseas puedes comentar la linea, eso hara que deshabilites la opción.\nIniciar modo gráfico y configurar escritorio Configurado bspwm y sxhkd, ahora sí, iniciamos el modo gráfico con:\n1  startx   Verás que no aparece nada, pero en realidad es que necesitas al menos abrir una terminal, para verificar que la configuración es correcta y que bspwm esta funcionando presaiona\nsuper + Return para iniciar terminator. (Donde \u0026ldquo;super\u0026rdquo; es la tecla de \u0026ldquo;windows\u0026rdquo; en tu teclado)\nConfigurar resolucion de pantalla En la terminal que acabas de abrir, teclea:\n1  arandr   para arreglar la resolucion de la pantalla.\nPara grabar la configuración selecciona el boton de \u0026ldquo;guardar\u0026rdquo; o \u0026ldquo;save\u0026rdquo; y nombra el arcvhivo \u0026ldquo;display.sh\u0026rdquo;\nLo siguiente es hacer este archivo ejecutable con:\n1  chmod +x ~/.screenlayout/display.sh   Luego agregalo a .xinitrc justo antes de \u0026ldquo;picom -f \u0026amp;\u0026rdquo; para que quede como sigue:\n1 2 3  $HOME/.screenlayout/display.sh picom -f\u0026amp; exec bspwm   Para salir de bspwm, presiona \u0026ldquo;super + alt + q\u0026rdquo;\nE inicia el modo gráfico de nuevo con startx.\nselecciona una imagen de wallpaper\ninicia nitrogen y configura el wallpaper\nagrega nitrogen a xinitrc\n1 2 3 4  $HOME/.screenlayout/display.sh nitrogen --restore \u0026amp; picom -f\u0026amp; exec bspwm   Para \u0026ldquo;arreglar\u0026rdquo; el cursor debes instalar xorg-xsetroot\n1  sudo pacman -S xorg-xsetroot   Agrega xsetroot -cursor_name left_ptr a .xinitrc para que quede como sigue.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40  #!/bin/sh  userresources=$HOME/.Xresources usermodmap=$HOME/.Xmodmap sysresources=/etc/X11/xinit/.Xresources sysmodmap=/etc/X11/xinit/.Xmodmap # merge in defaults and keymaps if [ -f $sysresources ]; then xrdb -merge $sysresources fi if [ -f $sysmodmap ]; then xmodmap $sysmodmap fi if [ -f \u0026#34;$userresources\u0026#34; ]; then xrdb -merge \u0026#34;$userresources\u0026#34; fi if [ -f \u0026#34;$usermodmap\u0026#34; ]; then xmodmap \u0026#34;$usermodmap\u0026#34; fi # start some nice programs if [ -d /etc/X11/xinit/xinitrc.d ] ; then for f in /etc/X11/xinit/xinitrc.d/?*.sh ; do [ -x \u0026#34;$f\u0026#34; ] \u0026amp;\u0026amp; . \u0026#34;$f\u0026#34; done unset f fi # Estas son las lineas que agregamos al archivo $HOME/.screenlayout/display.sh xsetroot -cursor_name left_ptr nitrogen --restore \u0026amp; picom -f\u0026amp; exec bspwm   Instalar Polybar Polybar esta en los repositorios AUR, para eso debemos tener instalado \u0026ldquo;yay\u0026rdquo;.\nCuando instalamos archlinux, tambien instalamos \u0026ldquo;git\u0026rdquo; si no estás siguiendo esta serie de tutoriales, solo instala o verifica que tengas \u0026ldquo;git\u0026rdquo; instalado.\nInstalar \u0026ldquo;yay\u0026rdquo; Para instalar yay teclea los siguientes comandos:\n1 2 3 4  cd ~ git clone https://aur.archlinux.org/yay.git cd yay makepkg -si   Instalar Polybar Para instalar Polybar corremos:\n1  yay polybar   Acepta los defaults y selecciona \u0026ldquo;N\u0026rdquo; para que no muestre las diferencias en la pantalla.\nConfigurar Polybar Comienza por instalar el archivo de configuración de ejemplo.\n1  install -Dm /usr/share/doc/polybar/config $HOME/.config/polybar/config   Instala los tipos de letra utilizados en la barra de ejemplo\n1 2  sudo pacman -S xorg-fonts-misc yay -S ttf-unifont siji-git   Ahora necesitamos crear un script para iniciar Polybar en\n~/.config/polybar/launch.sh Con el siguiente contenido:\n1 2 3 4 5 6 7 8 9 10 11 12  #!/usr/bin/env bash  # Terminate already running bar instances killall -q polybar # If all your bars have ipc enabled, you can also use  # polybar-msg cmd quit # Launch bar1 and bar2 echo \u0026#34;---\u0026#34; | tee -a /tmp/polybar1.log /tmp/polybar2.log polybar example \u0026gt;\u0026gt;/tmp/polybar1.log 2\u0026gt;\u0026amp;1 \u0026amp; echo \u0026#34;Bars launched...\u0026#34;   Después tenemos que hacer el script ejecutable con:\n1  chmod +x $HOME/.config/polybar/launch.sh   En este punto agregamos este script en nuestro archivo bspwmrc para que quede de la siguiente manera:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  #! /bin/sh  sxhkd \u0026amp; $HOME/.config/polybar/launch.sh bspc monitor -d I II III IV V VI VII VIII IX X bspc config border_width 2 bspc config window_gap 12 bspc config split_ratio 0.52 bspc config borderless_monocle true bspc config gapless_monocle true bspc rule -a Gimp desktop=\u0026#39;^8\u0026#39; state=floating follow=on bspc rule -a Chromium desktop=\u0026#39;^2\u0026#39; bspc rule -a mplayer2 state=floating bspc rule -a Kupfer.py focus=on bspc rule -a Screenkey manage=off   Resultado Final:\n","description":"En este post vamos a instalar bspwm como manejador de ventanas en una instalación limpia de Arch Linux. Además vamos a instalar y configurar Polybar.","id":4,"section":"blog","tags":["archlinux","linux","bspwm","polybar"],"title":"Como Instalar Bspwm Polybar en Archlinux","uri":"https://linuxfacil.mx/blog/linux/como-instalar-bspwm-polybar-en-archlinux/"},{"content":"  Bajar el ISO El primer paso obviamente es bajar el ISO del sitio oficial\nCrear una máquina virtual en VirtualBox Vamos a crear una máquina virtual en VirtualBox, las espicificaciones pueden variar dependiendo de tu computadora, en mi caso estoy corriendo VBox en una laptop con 8GB de Memoria y suficiente espacio en disco.\nCrea una máquina virtual nueva con el siguiente nombre y tipo Presiona \u0026ldquo;New\u0026rdquo; para crear una nueva maquina virtual, la llamaremos \u0026ldquo;ArchLinux\u0026rdquo;, sera de tipo \u0026ldquo;Linux\u0026rdquo; por supuesto y VBox deberá seleccionar por defecto la version, si no lo hace asegurate de que la versión sea \u0026ldquo;Arch Linux (64\u0026rsquo;bit)\nPresiona \u0026ldquo;Next\u0026rdquo; o \u0026ldquo;Siguiente\u0026rdquo; para continuar,\nAsigna la memoria Asigna la memoria que requieras o que tengas disponible. La guía oficial de Arch Linux recomenda como mínimo 530 MB de RAM y 2GB de espacio en disco, pero esta máquina nos va a servir para los siguientes tutoriales yo le voy a asignar 4GB de RAM y 10GB en disco; después le instalaremos un escritorio o manejador de ventanas.\nY pesiona \u0026ldquo;Siguente\u0026rdquo; o \u0026ldquo;Next\u0026rdquo;\nCrea un disco virtual Como estamos creando una máquina totalmente nueva, seleccionaremos crear un disco virtual Nuevo y presiona \u0026ldquo;Crear\u0026rdquo;\nSelecciona el tipo de disco que sea VDI (VirtualBox Disk Image) y presiona \u0026ldquo;Next\u0026rdquo;\nAhora selecciona el tipo de almacenamiento dinámico, esto hará que VirtualBox cree un archivo el cual utilizará para almacenar los datos y que irá creciendo conforme vayamos agregando más cosas en nuestra máquina virtual, esto quiere decir que aunque hayamos creado un disco virtual de 10GB, si solo utilizamos 5GB, esto será lo que estaremos utilizando físicamente en nuestra computadora.\nPor último asigna el espacio y presiona \u0026ldquo;Crear\u0026rdquo;.\nConfigura la nueva máquina virtual Antes de iniciar nuestra nueva máquina virtual tenemos que hacer unas modificaciones. La intención de este tutorial es que adquieras los conocimientos para instalar Arch Linux en tu laptop o PC de escritorio. Las computadoras actuales utilizan UEFI que es lo que viene a reemplazar lo que antes era el BIOS de las computadoras antiguas.\nHabilita EFI Dicho esto, en la pantalla principal de VirtualBox, selecciona tu nueva máquina virtual y presiona \u0026ldquo;Configuración\u0026rdquo; o \u0026ldquo;Settings\u0026rdquo;.\nLuego selecciona \u0026ldquo;Sistema\u0026rdquo; o \u0026ldquo;System\u0026rdquo;.\nAquí asegurate de habilitar la opción de EFI\nModifica el controlador de gráficos A continuación vamos a modificar el controlador de gráficos de nuestra máquina virtual, para esto Selecciona \u0026ldquo;Display\u0026rdquo; y en el controlador de gráficos selecciona VBoxSVGA Y presiona \u0026ldquo;OK\u0026rdquo;\nVirtualBox te dirá que la configuración es inválida, no hagas caso, no pasa nada, confía en lo que lees en Internet #Sarcasmo\nCambia el tipo de conexión a la red Por último debemos cambiar el tipo de conexión a la red para que sea tipo \u0026ldquo;Bridged\u0026rdquo;.\nInstala Arch Linux Inicia la máquina virtual Ahora si vamos a comenzar con la instalación de Arch Linux.\nUna vez que inicias la máquina virtual, como no tiene sistema operativo VirtualBox debe darte la opción de seleccionar un ISO para arrancar el sistema.\nSi por alguna razón no lo hace, lo que puedes hacer es seleccionar el ISO de Arch Linux y asignarlo Disco Óptico como se ve en la siguiente pantalla\nSeleciona \u0026ldquo;Storage\u0026rdquo; luego el controlador IDE y luego selecciona \u0026ldquo;Seleccionar Disco\u0026hellip;\u0026rdquo;\nInicia la Instalación de Arch Linux Para iniciar la instalación selecciona Arch Linux archiso x86_64 UEFI CD\nUna vez iniciado el sistema comienza lo bueno, ahora sí, vamos a instalar Arch Linux.\nConfigura el Teclado En mi caso estoy utilizando un teclado en Inglés así que no requiero en este paso, pero si tu estás utilizando un teclado en Español lo mejor es que lo configures para no batallar y hacer la instalación más sencilla.\n1  loadkeys es   Verifica UEFI en la maquina virtual Siguiente vamos a verificar que tengamos configurada nuestra máquina virtual con UEFI activado, para eso debemos teclear:\n1  ls /sys/firmware/efi/efivars   El commando deberá regresar un montón de variables en la pantalla, si no es así regresa al paso donde debes habilitar UEFI en la máquina virtual\nSincroniza el reloj A continuación vamos a sincronizar el reloj con internet, para eso escribimos\n1  timedatectl set-ntp true   Selecciona el servidor más cercano para instalar los paquetes (Mirror) Para esto vamos a necesitar un paquete que se llama Reflector, así que vamos a instalarlo primero escribiendo\n1  sudo pacman -Syy reflector   Ahora selecciona el servidor más cercano a donde te encuentras, para ver una lista de países escribe\n1  reflector --list-countries | more   Ya que tengas identificado el país que te queda más cerca escribe lo siguiente:\n(En mi caso como estoy en Estados Unidos, escogeré United States por supuesto, pero tú puedes cambialo por el país de la lista anterior que te quede más cerca)\n1  reflector -c \u0026#34;United States\u0026#34; -a 6 --sort rate --save /etc/pacman.d/mirrorlist   Actualiza los servidores de paquetes Siguente teclea\n1  pacman -Syyy   Crea Particiones en el Disco Primero vamos a verificar cual es el dispositivo donde se encuentra el disco de nuestra máquina virtual\n1  lsblk   Mi disco está en /dev/sda\nTenemos que crear 2 particiones, una para los archivos de inicio o \u0026ldquo;boot\u0026rdquo; y otra donde estará instalado Arch Linux, como este es un tutorial de \u0026ldquo;entrenamiento\u0026rdquo; no vamos a crear partició de SWAP ni tampoco partición para el directorio de \u0026ldquo;home\u0026rdquo;, vamos a hacer una instalación sencilla.\nLa primera partición deberá de ser de tipo EFI y la segunda tipo Linux\nPara crear las particiones voy a utilizar cfdisk\n1  cfdisk   Selecciona gpt\nLuego creamos la primera partición.\n Selecciona [ New ] El tamaño de la primera partición será de 250M  Selecciona [ Type ] y luego selecciona el tipo \u0026ldquo;EFI System\u0026rdquo;  Selecciona el espacio disponible (Free Space), luego selecciona [ New ] , presiona ENTER y luego ENTER de nuevo para seleccionar todo el espacio disponible, en mi caso los 9.8G restantes  Selecciona [ Type ] y luego selecciona \u0026ldquo;Linux filesystem\u0026rdquo; de la lista  Selecciona [ Write ] para guardar los cambios y crear las particiones. cfdisk te preguntara si estás seguro de que deseas crear las nuevas particiones. Teclea \u0026ldquo;yes\u0026rdquo; y presiona ENTER  Verifica las particiones Para verificar que todo haya ido bien teclea lsblk y asegurate de que las particiones estén como sigue\nFormatea las particiones  La primera partición es nuestra partición tipo EFI por lo tanto debemos formatearla de tipo FAT32  1  mkfs.fat -F32 /dev/sda1   Formatea la segunda partición, pero en esta ocasión el tipo será EXT4  1  mkfs.ext4 /dev/sda2   Monta las particiones Una vez creadas y formateadas nuestras particiones ahora debemos montarlas en nuestro sistema, para eso necesitmos hacer lo siguiente:\n Montar la segunda partición en /mnt que es nuestro directorio para la instalación  1  mount /dev/sda2 /mnt   Siguiente debemos crear el directorio donde estará nuestro partición de inicio, para eso vamos a crear un directorio nuevo en /mnt/boot/efi (El directorio boot no existe, así que debemos crearlo primero o podemos crear ambos directorios al mismo tiempo con el siguente comando)  1  mkdir -p /mnt/boot/efi   Monta la primera partición en /mnt/boot/efi  1  mount /dev/sda1 /mnt/boot/efi   Verifica que las particiones estén montadas correctamente utilizando lsblk  1  lsblk   Instala los paquetes \u0026ldquo;base\u0026rdquo; Una vez montadas las particiones comenzamos la instalación de los paquetes base, los paquetes que vamos a instalar son \u0026ldquo;base, linux, linux-firmware y vim (puedes instalar nano si lo deseas)\n1  pacstrap /mnt base linux linux-firmware vim   Crear fstab Listo, la instalación base ya está lista, ahora lo que necesitamos hacer es crear nuestro archivo fstab\n1  genfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab   Crea el archivo de SWAP Listo, ya que veas en tu archivo de fstab que todo está correcto, que tienes ambas particiones configuradas correctamente, vamos a crear nuestro archivo de swap.\n Primero entra a la instalación base  1  arch-chroot /mnt   Fíjate bien y el prompt cambió, ahora está entre corchetes [root@archiso /]\nVamos a crear el archivo de swap utilizando el comando dd, el archivo que voy a crear será de 2GB, es decir 2 bloques de 1GB cada uno.  1  dd if=/dev/zero of=/swapfile bs=1G count=2 status=progress   Ahora hay que cambiar los permisos del archivo  1  chmod 600 /swapfile   Cambia el tipo de archivo a swap  1  mkswap /swapfile   Habilita el archivo con:  1  swapon /swapfile   Agrega el archivo al sistema de archivos, es decir, al archivo fstab. (Yo voy a utilizar vim, si instalaste nano, utiliza nano)  1  vim /etc/fstab   Al final del archivo agrega lo siguiente:\n1  /swapfile none swap defaults 0 0   Configura tu zona horaria Ahora podemos continuar con la configuración de nuestra instalación, así que toca el turno de la zona horaria.\n Primero vamos a ver un listado de las zonas horarias disponibles. La zona horaria donde me encuentro es la zona de Chicago, sustituye Chicago por la ciudad que te corresponda, por ejemplo Mexico  1  timedatectl list-timezones | grep Chicago   Una vez identificada la zona horaria, creamos un enlace simbolico en etc/localtime  1  ln -sf /usr/share/zoneinfo/America/Chicago /etc/localtime   Ahora ya podemos sincronizar el reloj del sistema con el reloj de hardware  1  hwclock --systohc   Configura tu \u0026ldquo;Localización\u0026rdquo; Esto es para decirle a Arch Linux donde te encuentras y cual es el grupo de caracteres que corresponden a tu idioma por ejemplo.\nEn mi caso voy a utlizar Inglés de Estados Unidos, el código es \u0026ldquo;en_US.UTF-8\u0026rdquo; pero por ejemplo, si te encuentras en México y estás utilizando teclado en Español y deberás utilizar el código de \u0026ldquo;es_MX.UTF-8\u0026rdquo;.\nNota: Puedes habilitar más de un código de localización.\n Para habilitar el código de localización deseado, edita el siguente archivo y descomenta la línea donde se encuentre el código que andas buscando. (De nuevo, yo utilizo vim, tu puedes hacerlo con nano o con el que hayas instalado al inicio)  1  vim /etc/locale.gen   Genera la localización en el sistema  1  locale-gen   Ahora necesitamos crear el archivo de configuración en nuestra instalación para eso:  1  echo LANG=en_US.UTF-8 \u0026gt;\u0026gt; /etc/locale.conf   Nota: Sustituye \u0026ldquo;en_US.UTF-8\u0026rdquo; por el código que hayas habilitado en el paso anterior\n(Opcional) Si al comienzo de la instalación seleccionaste el tipo de teclado, deberás agregarlo a tu instalación con el siguente comando:\n(Suponiendo que seleccionaste \u0026ldquo;es\u0026rdquo;)  1  echo KEYMAP=es \u0026gt;\u0026gt; /etc/vconsole.conf   Configura la Red  Crea el archivo \u0026ldquo;hostname\u0026rdquo; para darle un nombre a tu máquina virutal. En mi caso voy a ser creativo y le daré el nombre de \u0026ldquo;archlinux\u0026rdquo;  1  vim /etc/hostname   Agrega lo siguiente a tu archivo /etc/hosts  1  vim /etc/hosts   1 2 3  127.0.0.1\tlocalhost ::1\tlocalhost 127.0.1.1\tarchlinx.localdomain\tarchlinux   Crea un password para root El siguiente paso de la instalación es darle un password a nuestro usuario de root.\nComo ya estamos en nuestra instalación, para cambiar el password solo debemos teclear:\n1  passwd   En el prompt escribe el nuevo password (Uno que no se te olvide) y en el siguente prompt vuelve a escribir el mismo password para confirmarlo.\nInstala los paquetes finales Es momento de instalar nuestro \u0026ldquo;boot loader\u0026rdquo; y paquetes finales antes de reiniciar la máquina. GRUB será nuestro boot loader.\n Instala los siguientes paquetes. Puedes agregar paquetes que creas necesarios.  1  pacman -S grub efibootmgr networkmanager network-manager-applet dialog os-prober mtools dosfstools base-devel linux-headers cups reflector openssh git xdg-utils xdg-user-dirs virtualbox-guest-utils   Acepta todos los prompts por defecto. Y presiona ENTER para continuar con la instalación\nSi te aparece la siguiente pantalla, presiona ENTER para aceptar las llaves PGP.\nInstala GRUB Es momento de instalar grub en el directorio /boot/efi que creamos al inicio, que es la partición de inicio\n1  grub-install --target=x86_64-efi --efi-directory=/boot/efi --botloader-id=GRUB   Ahora necesitamos crear el archivo de configuración  1  grub-mkconfig -o /boot/grub/grub.cfg   Habilita los servicios Llegó el momento de habilitar los servicios que correrán cada que reinicies la máquina.\n Habilita el manejador de la red Continua con el servicio de SSH Luego el servicio para imprimir  1 2 3  systemctl enable NetworkManager systemctl enable sshd systemctl enable org.cups.cupsd   Crea tu usuario Todo lo hemos hecho con el usuario de root, pero siempre es conveniente tener tu propio usuario para no utilizar root para las tareas diarias. Voy a crear mi usuario que se llamará \u0026ldquo;jorge\u0026rdquo;.\n Crea el usuario y asignalo al grupo \u0026ldquo;wheel\u0026rdquo; Crea un password para tu usuario  1 2  useradd -mG wheel jorge passwd jorge   Ahora para darle privilegios de \u0026ldquo;sudo\u0026rdquo; y puedas ejecutar comandos como superusuario \u0026ldquo;root\u0026rdquo;, debemos descomentar la linea que dice \u0026quot;%wheel ALL=(ALL) ALL\u0026rdquo; con el siguiente comando  Recuerda que puedes sustituir \u0026ldquo;vim\u0026rdquo; por \u0026ldquo;nano\u0026rdquo; si lo prefieres.\n1  EDITOR=vim visudo   Sal de la instalación y reinicia la máquina virtual Con esto terminamos la instalación, así que solo queda:\n Salir de la instalación Desmontar las particiones Reiniciar la máquina virtual  1 2 3  exit umount -a reboot   Instalación Exitosa Después de reiniciar la máquina virtual verás que GRUB está instalado y debe estar funcionando correctamente.\nEntra a tu nueva instalación de Arch Linux con el usuario y password que creaste para verificar que todo esté funcionando correctamente.\nSi encontraste este tutorial útil no olvides que puedes compartirlo con tus compañeros, familiares y amigos utilizando los botones al final del artículo.\nNo dejes de visitarme porque estaré subiendo más tutoriales, ahora lo que sigue es instalar un escritorio en esta máquina virtual. ¿Cuál te gustaría instalar? ¿Gnome? ¿KDE? ¿O talvez un manejador de ventanas como i3 o awesome?\n","description":"Hoy vamos a instalar ArchLinux en una máquina virtual en VirtualBox. La instalación es muy parecida a la que deberás llevar a cabo cuando lo instalemos en una laptop o PC. Bien, entoces, comencemos...","id":5,"section":"blog","tags":["archlinux","linux"],"title":"Como Instalar Archlinux en Virtualbox","uri":"https://linuxfacil.mx/blog/linux/como-instalar-archlinux-en-virtualbox/"},{"content":"Paso 1: Descargar Python El primer paso es descargar descargar python del sitio oficial: https://www.python.org/\nSolo secciona la opción de \u0026ldquo;Download\u0026rdquo; en la página principal, el stitio por defecto debe detectar que estás utlizando Windows y te ofrecerá el instalador que requieres.\nPaso 2: Ejecuta la instalación El siguiente paso es obvio, ejecuta la instalación.\nEs importante que durante la instalación selecciones que deseas instalar PIP y presiona \u0026ldquo;Next\u0026rdquo;\nEn la siguiente pantalla deja los parametros por default y presiona \u0026ldquo;Install\u0026rdquo;.\nA mi en lo personal me gusta que la instalación de Python esté en C:\\Python\u0026lt;\u0026lt;version\u0026gt;\u0026gt; donde la versión en este caso es la 3.8.\nPaso 3: Verifica la instalación Para verificar que todo haya ido conforme a lo planeado y que tienes Python instalado de manera correcta solo abre una ventana de comando y escribe\n1  python --version   Por último verifica que se haya instalado correctamente PIP.\n1  pip   pip tiene que regresar la ayuda, algo parecido a la imágen anterior. Si recibes un mensaje de error diciendo que no se encuentra instalado, solo ejecuta la instalación de nuevo y selecciona \u0026ldquo;Reparar\u0026rdquo;\nEso es todo por hoy, espero que no hayas tenido problemas al instalar python.\nSiguente tutorial será crear tu primer programa en #Python\n","description":"En tan solo 3 sencillos pasos, aprende a instalar python 3 en Windows 10.","id":6,"section":"blog","tags":["python","windows"],"title":"Como Instalar Python en Windows 10 en 3 Sencillos Pasos.","uri":"https://linuxfacil.mx/blog/python/como-instalar-python-en-windows-10/"}]